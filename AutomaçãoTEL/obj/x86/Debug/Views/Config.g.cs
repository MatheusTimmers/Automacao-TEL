#pragma checksum "C:\Users\Matheus Timmers\Documents\WorkProjects\AutomacaoTEL-main\AutomaçãoTEL\Views\Config.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "6FD347115E7DEE30AAA72EC898A329D3"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AutomaçãoTEL.Views
{
    partial class Config : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_Controls_TextBox_Text(global::Windows.UI.Xaml.Controls.TextBox obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedItem(global::Windows.UI.Xaml.Controls.Primitives.Selector obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.SelectedItem = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton obj, global::System.Nullable<global::System.Boolean> value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Nullable<global::System.Boolean>) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Nullable<global::System.Boolean>), targetNullValue);
                }
                obj.IsChecked = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class Config_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IConfig_Bindings
        {
            private global::AutomaçãoTEL.Views.Config dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.TextBox obj13;
            private global::Windows.UI.Xaml.Controls.TextBox obj14;
            private global::Windows.UI.Xaml.Controls.TextBox obj15;
            private global::Windows.UI.Xaml.Controls.TextBox obj22;
            private global::Windows.UI.Xaml.Controls.TextBox obj23;
            private global::Windows.UI.Xaml.Controls.TextBox obj31;
            private global::Windows.UI.Xaml.Controls.TextBox obj32;
            private global::Windows.UI.Xaml.Controls.TextBox obj33;
            private global::Windows.UI.Xaml.Controls.ComboBox obj34;
            private global::Windows.UI.Xaml.Controls.TextBox obj43;
            private global::Windows.UI.Xaml.Controls.TextBox obj44;
            private global::Windows.UI.Xaml.Controls.TextBox obj52;
            private global::Windows.UI.Xaml.Controls.TextBox obj53;
            private global::Windows.UI.Xaml.Controls.TextBox obj54;
            private global::Windows.UI.Xaml.Controls.CheckBox obj58;
            private global::Windows.UI.Xaml.Controls.CheckBox obj59;
            private global::Windows.UI.Xaml.Controls.CheckBox obj60;
            private global::Windows.UI.Xaml.Controls.CheckBox obj61;
            private global::Windows.UI.Xaml.Controls.CheckBox obj62;
            private global::Windows.UI.Xaml.Controls.CheckBox obj63;
            private global::Windows.UI.Xaml.Controls.TextBox obj69;
            private global::Windows.UI.Xaml.Controls.TextBox obj70;

            private Config_obj1_BindingsTracking bindingsTracking;

            public Config_obj1_Bindings()
            {
                this.bindingsTracking = new Config_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 13: // Views\Config.xaml line 114
                        this.obj13 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_13(this.obj13);
                        break;
                    case 14: // Views\Config.xaml line 115
                        this.obj14 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_14(this.obj14);
                        break;
                    case 15: // Views\Config.xaml line 116
                        this.obj15 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_15(this.obj15);
                        break;
                    case 22: // Views\Config.xaml line 100
                        this.obj22 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_22(this.obj22);
                        break;
                    case 23: // Views\Config.xaml line 101
                        this.obj23 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_23(this.obj23);
                        break;
                    case 31: // Views\Config.xaml line 85
                        this.obj31 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_31(this.obj31);
                        break;
                    case 32: // Views\Config.xaml line 86
                        this.obj32 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_32(this.obj32);
                        break;
                    case 33: // Views\Config.xaml line 87
                        this.obj33 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_33(this.obj33);
                        break;
                    case 34: // Views\Config.xaml line 44
                        this.obj34 = (global::Windows.UI.Xaml.Controls.ComboBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_34(this.obj34);
                        break;
                    case 43: // Views\Config.xaml line 68
                        this.obj43 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_43(this.obj43);
                        break;
                    case 44: // Views\Config.xaml line 69
                        this.obj44 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_44(this.obj44);
                        break;
                    case 52: // Views\Config.xaml line 53
                        this.obj52 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_52(this.obj52);
                        break;
                    case 53: // Views\Config.xaml line 54
                        this.obj53 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_53(this.obj53);
                        break;
                    case 54: // Views\Config.xaml line 55
                        this.obj54 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_54(this.obj54);
                        break;
                    case 58: // Views\Config.xaml line 35
                        this.obj58 = (global::Windows.UI.Xaml.Controls.CheckBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_58(this.obj58);
                        break;
                    case 59: // Views\Config.xaml line 36
                        this.obj59 = (global::Windows.UI.Xaml.Controls.CheckBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_59(this.obj59);
                        break;
                    case 60: // Views\Config.xaml line 37
                        this.obj60 = (global::Windows.UI.Xaml.Controls.CheckBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_60(this.obj60);
                        break;
                    case 61: // Views\Config.xaml line 28
                        this.obj61 = (global::Windows.UI.Xaml.Controls.CheckBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_61(this.obj61);
                        break;
                    case 62: // Views\Config.xaml line 29
                        this.obj62 = (global::Windows.UI.Xaml.Controls.CheckBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_62(this.obj62);
                        break;
                    case 63: // Views\Config.xaml line 30
                        this.obj63 = (global::Windows.UI.Xaml.Controls.CheckBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_63(this.obj63);
                        break;
                    case 69: // Views\Config.xaml line 17
                        this.obj69 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_69(this.obj69);
                        break;
                    case 70: // Views\Config.xaml line 18
                        this.obj70 = (global::Windows.UI.Xaml.Controls.TextBox)target;
                        this.bindingsTracking.RegisterTwoWayListener_70(this.obj70);
                        break;
                    default:
                        break;
                }
            }

            // IConfig_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::AutomaçãoTEL.Views.Config)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::AutomaçãoTEL.Views.Config obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ControlerConfig(obj.ControlerConfig, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ComboBoxOptions(obj.ComboBoxOptions, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_SelectedComboBoxOption(obj.SelectedComboBoxOption, phase);
                    }
                }
            }
            private void Update_ControlerConfig(global::AutomaçãoTEL.ViewModel.ConfigViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ControlerConfig(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ControlerConfig_Configs(obj.Configs, phase);
                    }
                }
            }
            private void Update_ControlerConfig_Configs(global::AutomaçãoTEL.ViewModel.LocalConfig obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ControlerConfig_Configs(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ControlerConfig_Configs_BTConfigs(obj.BTConfigs, phase);
                        this.Update_ControlerConfig_Configs_WifiConfigs(obj.WifiConfigs, phase);
                        this.Update_ControlerConfig_Configs_IsCheckedFreqI(obj.IsCheckedFreqI, phase);
                        this.Update_ControlerConfig_Configs_IsCheckedFreqC(obj.IsCheckedFreqC, phase);
                        this.Update_ControlerConfig_Configs_IsCheckedFreqF(obj.IsCheckedFreqF, phase);
                        this.Update_ControlerConfig_Configs_IsCheckedPrintI(obj.IsCheckedPrintI, phase);
                        this.Update_ControlerConfig_Configs_IsCheckedPrintC(obj.IsCheckedPrintC, phase);
                        this.Update_ControlerConfig_Configs_IsCheckedPrintF(obj.IsCheckedPrintF, phase);
                        this.Update_ControlerConfig_Configs_RefLevel(obj.RefLevel, phase);
                        this.Update_ControlerConfig_Configs_Att(obj.Att, phase);
                    }
                }
            }
            private void Update_ControlerConfig_Configs_BTConfigs(global::AutomaçãoTEL.ViewModel.ConfigBT obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ControlerConfig_Configs_BTConfigs(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ControlerConfig_Configs_BTConfigs_FreqISalto(obj.FreqISalto, phase);
                        this.Update_ControlerConfig_Configs_BTConfigs_FreqMSalto(obj.FreqMSalto, phase);
                        this.Update_ControlerConfig_Configs_BTConfigs_FreqFSalto(obj.FreqFSalto, phase);
                        this.Update_ControlerConfig_Configs_BTConfigs_FreqIEspBT(obj.FreqIEspBT, phase);
                        this.Update_ControlerConfig_Configs_BTConfigs_FreqFEspBT(obj.FreqFEspBT, phase);
                        this.Update_ControlerConfig_Configs_BTConfigs_FreqIBT(obj.FreqIBT, phase);
                        this.Update_ControlerConfig_Configs_BTConfigs_FreqCBT(obj.FreqCBT, phase);
                        this.Update_ControlerConfig_Configs_BTConfigs_FreqFBT(obj.FreqFBT, phase);
                    }
                }
            }
            private void Update_ControlerConfig_Configs_BTConfigs_FreqISalto(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Config.xaml line 114
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj13, obj, null);
                }
            }
            private void Update_ControlerConfig_Configs_BTConfigs_FreqMSalto(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Config.xaml line 115
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj14, obj, null);
                }
            }
            private void Update_ControlerConfig_Configs_BTConfigs_FreqFSalto(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Config.xaml line 116
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj15, obj, null);
                }
            }
            private void Update_ControlerConfig_Configs_BTConfigs_FreqIEspBT(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Config.xaml line 100
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj22, obj, null);
                }
            }
            private void Update_ControlerConfig_Configs_BTConfigs_FreqFEspBT(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Config.xaml line 101
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj23, obj, null);
                }
            }
            private void Update_ControlerConfig_Configs_BTConfigs_FreqIBT(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Config.xaml line 85
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj31, obj, null);
                }
            }
            private void Update_ControlerConfig_Configs_BTConfigs_FreqCBT(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Config.xaml line 86
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj32, obj, null);
                }
            }
            private void Update_ControlerConfig_Configs_BTConfigs_FreqFBT(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Config.xaml line 87
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj33, obj, null);
                }
            }
            private void Update_ComboBoxOptions(global::System.Collections.ObjectModel.ObservableCollection<global::Windows.UI.Xaml.Controls.ComboBoxItem> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\Config.xaml line 44
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj34, obj, null);
                }
            }
            private void Update_SelectedComboBoxOption(global::Windows.UI.Xaml.Controls.ComboBoxItem obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Config.xaml line 44
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_Selector_SelectedItem(this.obj34, obj, null);
                }
            }
            private void Update_ControlerConfig_Configs_WifiConfigs(global::AutomaçãoTEL.ViewModel.ConfigWifi obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ControlerConfig_Configs_WifiConfigs(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ControlerConfig_Configs_WifiConfigs_FreqIEspWifi(obj.FreqIEspWifi, phase);
                        this.Update_ControlerConfig_Configs_WifiConfigs_FreqFEspWifi(obj.FreqFEspWifi, phase);
                        this.Update_ControlerConfig_Configs_WifiConfigs_FreqIWifi(obj.FreqIWifi, phase);
                        this.Update_ControlerConfig_Configs_WifiConfigs_FreqCWifi(obj.FreqCWifi, phase);
                        this.Update_ControlerConfig_Configs_WifiConfigs_FreqFWifi(obj.FreqFWifi, phase);
                    }
                }
            }
            private void Update_ControlerConfig_Configs_WifiConfigs_FreqIEspWifi(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Config.xaml line 68
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj43, obj, null);
                }
            }
            private void Update_ControlerConfig_Configs_WifiConfigs_FreqFEspWifi(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Config.xaml line 69
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj44, obj, null);
                }
            }
            private void Update_ControlerConfig_Configs_WifiConfigs_FreqIWifi(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Config.xaml line 53
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj52, obj, null);
                }
            }
            private void Update_ControlerConfig_Configs_WifiConfigs_FreqCWifi(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Config.xaml line 54
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj53, obj, null);
                }
            }
            private void Update_ControlerConfig_Configs_WifiConfigs_FreqFWifi(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Config.xaml line 55
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj54, obj, null);
                }
            }
            private void Update_ControlerConfig_Configs_IsCheckedFreqI(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Config.xaml line 35
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this.obj58, obj, null);
                }
            }
            private void Update_ControlerConfig_Configs_IsCheckedFreqC(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Config.xaml line 36
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this.obj59, obj, null);
                }
            }
            private void Update_ControlerConfig_Configs_IsCheckedFreqF(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Config.xaml line 37
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this.obj60, obj, null);
                }
            }
            private void Update_ControlerConfig_Configs_IsCheckedPrintI(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Config.xaml line 28
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this.obj61, obj, null);
                }
            }
            private void Update_ControlerConfig_Configs_IsCheckedPrintC(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Config.xaml line 29
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this.obj62, obj, null);
                }
            }
            private void Update_ControlerConfig_Configs_IsCheckedPrintF(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Config.xaml line 30
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ToggleButton_IsChecked(this.obj63, obj, null);
                }
            }
            private void Update_ControlerConfig_Configs_RefLevel(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Config.xaml line 17
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj69, obj, null);
                }
            }
            private void Update_ControlerConfig_Configs_Att(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\Config.xaml line 18
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBox_Text(this.obj70, obj, null);
                }
            }
            private void UpdateTwoWay_13_Text()
            {
                if (this.initialized)
                {
                    this.dataRoot.ControlerConfig.Configs.BTConfigs.FreqISalto = this.obj13.Text;
                }
            }
            private void UpdateTwoWay_14_Text()
            {
                if (this.initialized)
                {
                    this.dataRoot.ControlerConfig.Configs.BTConfigs.FreqMSalto = this.obj14.Text;
                }
            }
            private void UpdateTwoWay_15_Text()
            {
                if (this.initialized)
                {
                    this.dataRoot.ControlerConfig.Configs.BTConfigs.FreqFSalto = this.obj15.Text;
                }
            }
            private void UpdateTwoWay_22_Text()
            {
                if (this.initialized)
                {
                    this.dataRoot.ControlerConfig.Configs.BTConfigs.FreqIEspBT = this.obj22.Text;
                }
            }
            private void UpdateTwoWay_23_Text()
            {
                if (this.initialized)
                {
                    this.dataRoot.ControlerConfig.Configs.BTConfigs.FreqFEspBT = this.obj23.Text;
                }
            }
            private void UpdateTwoWay_31_Text()
            {
                if (this.initialized)
                {
                    this.dataRoot.ControlerConfig.Configs.BTConfigs.FreqIBT = this.obj31.Text;
                }
            }
            private void UpdateTwoWay_32_Text()
            {
                if (this.initialized)
                {
                    this.dataRoot.ControlerConfig.Configs.BTConfigs.FreqCBT = this.obj32.Text;
                }
            }
            private void UpdateTwoWay_33_Text()
            {
                if (this.initialized)
                {
                    this.dataRoot.ControlerConfig.Configs.BTConfigs.FreqFBT = this.obj33.Text;
                }
            }
            private void UpdateTwoWay_34_SelectedItem()
            {
                if (this.initialized)
                {
                    this.dataRoot.SelectedComboBoxOption = (global::Windows.UI.Xaml.Controls.ComboBoxItem)this.obj34.SelectedItem;
                }
            }
            private void UpdateTwoWay_43_Text()
            {
                if (this.initialized)
                {
                    this.dataRoot.ControlerConfig.Configs.WifiConfigs.FreqIEspWifi = this.obj43.Text;
                }
            }
            private void UpdateTwoWay_44_Text()
            {
                if (this.initialized)
                {
                    this.dataRoot.ControlerConfig.Configs.WifiConfigs.FreqFEspWifi = this.obj44.Text;
                }
            }
            private void UpdateTwoWay_52_Text()
            {
                if (this.initialized)
                {
                    this.dataRoot.ControlerConfig.Configs.WifiConfigs.FreqIWifi = this.obj52.Text;
                }
            }
            private void UpdateTwoWay_53_Text()
            {
                if (this.initialized)
                {
                    this.dataRoot.ControlerConfig.Configs.WifiConfigs.FreqCWifi = this.obj53.Text;
                }
            }
            private void UpdateTwoWay_54_Text()
            {
                if (this.initialized)
                {
                    this.dataRoot.ControlerConfig.Configs.WifiConfigs.FreqFWifi = this.obj54.Text;
                }
            }
            private void UpdateTwoWay_58_IsChecked()
            {
                if (this.initialized)
                {
                    this.dataRoot.ControlerConfig.Configs.IsCheckedFreqI = (global::System.Boolean)this.obj58.IsChecked;
                }
            }
            private void UpdateTwoWay_59_IsChecked()
            {
                if (this.initialized)
                {
                    this.dataRoot.ControlerConfig.Configs.IsCheckedFreqC = (global::System.Boolean)this.obj59.IsChecked;
                }
            }
            private void UpdateTwoWay_60_IsChecked()
            {
                if (this.initialized)
                {
                    this.dataRoot.ControlerConfig.Configs.IsCheckedFreqF = (global::System.Boolean)this.obj60.IsChecked;
                }
            }
            private void UpdateTwoWay_61_IsChecked()
            {
                if (this.initialized)
                {
                    this.dataRoot.ControlerConfig.Configs.IsCheckedPrintI = (global::System.Boolean)this.obj61.IsChecked;
                }
            }
            private void UpdateTwoWay_62_IsChecked()
            {
                if (this.initialized)
                {
                    this.dataRoot.ControlerConfig.Configs.IsCheckedPrintC = (global::System.Boolean)this.obj62.IsChecked;
                }
            }
            private void UpdateTwoWay_63_IsChecked()
            {
                if (this.initialized)
                {
                    this.dataRoot.ControlerConfig.Configs.IsCheckedPrintF = (global::System.Boolean)this.obj63.IsChecked;
                }
            }
            private void UpdateTwoWay_69_Text()
            {
                if (this.initialized)
                {
                    this.dataRoot.ControlerConfig.Configs.RefLevel = this.obj69.Text;
                }
            }
            private void UpdateTwoWay_70_Text()
            {
                if (this.initialized)
                {
                    this.dataRoot.ControlerConfig.Configs.Att = this.obj70.Text;
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class Config_obj1_BindingsTracking
            {
                private global::System.WeakReference<Config_obj1_Bindings> weakRefToBindingObj; 

                public Config_obj1_BindingsTracking(Config_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<Config_obj1_Bindings>(obj);
                }

                public Config_obj1_Bindings TryGetBindingObject()
                {
                    Config_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_ControlerConfig(null);
                    UpdateChildListeners_ControlerConfig_Configs(null);
                    UpdateChildListeners_ControlerConfig_Configs_BTConfigs(null);
                    UpdateChildListeners_ControlerConfig_Configs_WifiConfigs(null);
                }

                public void PropertyChanged_ControlerConfig(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    Config_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::AutomaçãoTEL.ViewModel.ConfigViewModel obj = sender as global::AutomaçãoTEL.ViewModel.ConfigViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ControlerConfig_Configs(obj.Configs, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Configs":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ControlerConfig_Configs(obj.Configs, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::AutomaçãoTEL.ViewModel.ConfigViewModel cache_ControlerConfig = null;
                public void UpdateChildListeners_ControlerConfig(global::AutomaçãoTEL.ViewModel.ConfigViewModel obj)
                {
                    if (obj != cache_ControlerConfig)
                    {
                        if (cache_ControlerConfig != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ControlerConfig).PropertyChanged -= PropertyChanged_ControlerConfig;
                            cache_ControlerConfig = null;
                        }
                        if (obj != null)
                        {
                            cache_ControlerConfig = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ControlerConfig;
                        }
                    }
                }
                public void PropertyChanged_ControlerConfig_Configs(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    Config_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::AutomaçãoTEL.ViewModel.LocalConfig obj = sender as global::AutomaçãoTEL.ViewModel.LocalConfig;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ControlerConfig_Configs_BTConfigs(obj.BTConfigs, DATA_CHANGED);
                                bindings.Update_ControlerConfig_Configs_WifiConfigs(obj.WifiConfigs, DATA_CHANGED);
                                bindings.Update_ControlerConfig_Configs_IsCheckedFreqI(obj.IsCheckedFreqI, DATA_CHANGED);
                                bindings.Update_ControlerConfig_Configs_IsCheckedFreqC(obj.IsCheckedFreqC, DATA_CHANGED);
                                bindings.Update_ControlerConfig_Configs_IsCheckedFreqF(obj.IsCheckedFreqF, DATA_CHANGED);
                                bindings.Update_ControlerConfig_Configs_IsCheckedPrintI(obj.IsCheckedPrintI, DATA_CHANGED);
                                bindings.Update_ControlerConfig_Configs_IsCheckedPrintC(obj.IsCheckedPrintC, DATA_CHANGED);
                                bindings.Update_ControlerConfig_Configs_IsCheckedPrintF(obj.IsCheckedPrintF, DATA_CHANGED);
                                bindings.Update_ControlerConfig_Configs_RefLevel(obj.RefLevel, DATA_CHANGED);
                                bindings.Update_ControlerConfig_Configs_Att(obj.Att, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "BTConfigs":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ControlerConfig_Configs_BTConfigs(obj.BTConfigs, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "WifiConfigs":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ControlerConfig_Configs_WifiConfigs(obj.WifiConfigs, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsCheckedFreqI":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ControlerConfig_Configs_IsCheckedFreqI(obj.IsCheckedFreqI, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsCheckedFreqC":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ControlerConfig_Configs_IsCheckedFreqC(obj.IsCheckedFreqC, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsCheckedFreqF":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ControlerConfig_Configs_IsCheckedFreqF(obj.IsCheckedFreqF, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsCheckedPrintI":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ControlerConfig_Configs_IsCheckedPrintI(obj.IsCheckedPrintI, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsCheckedPrintC":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ControlerConfig_Configs_IsCheckedPrintC(obj.IsCheckedPrintC, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsCheckedPrintF":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ControlerConfig_Configs_IsCheckedPrintF(obj.IsCheckedPrintF, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "RefLevel":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ControlerConfig_Configs_RefLevel(obj.RefLevel, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Att":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ControlerConfig_Configs_Att(obj.Att, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::AutomaçãoTEL.ViewModel.LocalConfig cache_ControlerConfig_Configs = null;
                public void UpdateChildListeners_ControlerConfig_Configs(global::AutomaçãoTEL.ViewModel.LocalConfig obj)
                {
                    if (obj != cache_ControlerConfig_Configs)
                    {
                        if (cache_ControlerConfig_Configs != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ControlerConfig_Configs).PropertyChanged -= PropertyChanged_ControlerConfig_Configs;
                            cache_ControlerConfig_Configs = null;
                        }
                        if (obj != null)
                        {
                            cache_ControlerConfig_Configs = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ControlerConfig_Configs;
                        }
                    }
                }
                public void PropertyChanged_ControlerConfig_Configs_BTConfigs(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    Config_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::AutomaçãoTEL.ViewModel.ConfigBT obj = sender as global::AutomaçãoTEL.ViewModel.ConfigBT;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ControlerConfig_Configs_BTConfigs_FreqISalto(obj.FreqISalto, DATA_CHANGED);
                                bindings.Update_ControlerConfig_Configs_BTConfigs_FreqMSalto(obj.FreqMSalto, DATA_CHANGED);
                                bindings.Update_ControlerConfig_Configs_BTConfigs_FreqFSalto(obj.FreqFSalto, DATA_CHANGED);
                                bindings.Update_ControlerConfig_Configs_BTConfigs_FreqIEspBT(obj.FreqIEspBT, DATA_CHANGED);
                                bindings.Update_ControlerConfig_Configs_BTConfigs_FreqFEspBT(obj.FreqFEspBT, DATA_CHANGED);
                                bindings.Update_ControlerConfig_Configs_BTConfigs_FreqIBT(obj.FreqIBT, DATA_CHANGED);
                                bindings.Update_ControlerConfig_Configs_BTConfigs_FreqCBT(obj.FreqCBT, DATA_CHANGED);
                                bindings.Update_ControlerConfig_Configs_BTConfigs_FreqFBT(obj.FreqFBT, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "FreqISalto":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ControlerConfig_Configs_BTConfigs_FreqISalto(obj.FreqISalto, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "FreqMSalto":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ControlerConfig_Configs_BTConfigs_FreqMSalto(obj.FreqMSalto, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "FreqFSalto":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ControlerConfig_Configs_BTConfigs_FreqFSalto(obj.FreqFSalto, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "FreqIEspBT":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ControlerConfig_Configs_BTConfigs_FreqIEspBT(obj.FreqIEspBT, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "FreqFEspBT":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ControlerConfig_Configs_BTConfigs_FreqFEspBT(obj.FreqFEspBT, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "FreqIBT":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ControlerConfig_Configs_BTConfigs_FreqIBT(obj.FreqIBT, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "FreqCBT":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ControlerConfig_Configs_BTConfigs_FreqCBT(obj.FreqCBT, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "FreqFBT":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ControlerConfig_Configs_BTConfigs_FreqFBT(obj.FreqFBT, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::AutomaçãoTEL.ViewModel.ConfigBT cache_ControlerConfig_Configs_BTConfigs = null;
                public void UpdateChildListeners_ControlerConfig_Configs_BTConfigs(global::AutomaçãoTEL.ViewModel.ConfigBT obj)
                {
                    if (obj != cache_ControlerConfig_Configs_BTConfigs)
                    {
                        if (cache_ControlerConfig_Configs_BTConfigs != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ControlerConfig_Configs_BTConfigs).PropertyChanged -= PropertyChanged_ControlerConfig_Configs_BTConfigs;
                            cache_ControlerConfig_Configs_BTConfigs = null;
                        }
                        if (obj != null)
                        {
                            cache_ControlerConfig_Configs_BTConfigs = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ControlerConfig_Configs_BTConfigs;
                        }
                    }
                }
                public void PropertyChanged_ControlerConfig_Configs_WifiConfigs(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    Config_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::AutomaçãoTEL.ViewModel.ConfigWifi obj = sender as global::AutomaçãoTEL.ViewModel.ConfigWifi;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ControlerConfig_Configs_WifiConfigs_FreqIEspWifi(obj.FreqIEspWifi, DATA_CHANGED);
                                bindings.Update_ControlerConfig_Configs_WifiConfigs_FreqFEspWifi(obj.FreqFEspWifi, DATA_CHANGED);
                                bindings.Update_ControlerConfig_Configs_WifiConfigs_FreqIWifi(obj.FreqIWifi, DATA_CHANGED);
                                bindings.Update_ControlerConfig_Configs_WifiConfigs_FreqCWifi(obj.FreqCWifi, DATA_CHANGED);
                                bindings.Update_ControlerConfig_Configs_WifiConfigs_FreqFWifi(obj.FreqFWifi, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "FreqIEspWifi":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ControlerConfig_Configs_WifiConfigs_FreqIEspWifi(obj.FreqIEspWifi, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "FreqFEspWifi":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ControlerConfig_Configs_WifiConfigs_FreqFEspWifi(obj.FreqFEspWifi, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "FreqIWifi":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ControlerConfig_Configs_WifiConfigs_FreqIWifi(obj.FreqIWifi, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "FreqCWifi":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ControlerConfig_Configs_WifiConfigs_FreqCWifi(obj.FreqCWifi, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "FreqFWifi":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ControlerConfig_Configs_WifiConfigs_FreqFWifi(obj.FreqFWifi, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::AutomaçãoTEL.ViewModel.ConfigWifi cache_ControlerConfig_Configs_WifiConfigs = null;
                public void UpdateChildListeners_ControlerConfig_Configs_WifiConfigs(global::AutomaçãoTEL.ViewModel.ConfigWifi obj)
                {
                    if (obj != cache_ControlerConfig_Configs_WifiConfigs)
                    {
                        if (cache_ControlerConfig_Configs_WifiConfigs != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ControlerConfig_Configs_WifiConfigs).PropertyChanged -= PropertyChanged_ControlerConfig_Configs_WifiConfigs;
                            cache_ControlerConfig_Configs_WifiConfigs = null;
                        }
                        if (obj != null)
                        {
                            cache_ControlerConfig_Configs_WifiConfigs = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ControlerConfig_Configs_WifiConfigs;
                        }
                    }
                }
                public void RegisterTwoWayListener_13(global::Windows.UI.Xaml.Controls.TextBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBox.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_13_Text();
                        }
                    });
                }
                public void RegisterTwoWayListener_14(global::Windows.UI.Xaml.Controls.TextBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBox.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_14_Text();
                        }
                    });
                }
                public void RegisterTwoWayListener_15(global::Windows.UI.Xaml.Controls.TextBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBox.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_15_Text();
                        }
                    });
                }
                public void RegisterTwoWayListener_22(global::Windows.UI.Xaml.Controls.TextBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBox.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_22_Text();
                        }
                    });
                }
                public void RegisterTwoWayListener_23(global::Windows.UI.Xaml.Controls.TextBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBox.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_23_Text();
                        }
                    });
                }
                public void RegisterTwoWayListener_31(global::Windows.UI.Xaml.Controls.TextBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBox.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_31_Text();
                        }
                    });
                }
                public void RegisterTwoWayListener_32(global::Windows.UI.Xaml.Controls.TextBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBox.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_32_Text();
                        }
                    });
                }
                public void RegisterTwoWayListener_33(global::Windows.UI.Xaml.Controls.TextBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBox.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_33_Text();
                        }
                    });
                }
                public void RegisterTwoWayListener_34(global::Windows.UI.Xaml.Controls.ComboBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.Selector.SelectedItemProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_34_SelectedItem();
                        }
                    });
                }
                public void RegisterTwoWayListener_43(global::Windows.UI.Xaml.Controls.TextBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBox.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_43_Text();
                        }
                    });
                }
                public void RegisterTwoWayListener_44(global::Windows.UI.Xaml.Controls.TextBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBox.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_44_Text();
                        }
                    });
                }
                public void RegisterTwoWayListener_52(global::Windows.UI.Xaml.Controls.TextBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBox.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_52_Text();
                        }
                    });
                }
                public void RegisterTwoWayListener_53(global::Windows.UI.Xaml.Controls.TextBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBox.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_53_Text();
                        }
                    });
                }
                public void RegisterTwoWayListener_54(global::Windows.UI.Xaml.Controls.TextBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBox.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_54_Text();
                        }
                    });
                }
                public void RegisterTwoWayListener_58(global::Windows.UI.Xaml.Controls.CheckBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_58_IsChecked();
                        }
                    });
                }
                public void RegisterTwoWayListener_59(global::Windows.UI.Xaml.Controls.CheckBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_59_IsChecked();
                        }
                    });
                }
                public void RegisterTwoWayListener_60(global::Windows.UI.Xaml.Controls.CheckBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_60_IsChecked();
                        }
                    });
                }
                public void RegisterTwoWayListener_61(global::Windows.UI.Xaml.Controls.CheckBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_61_IsChecked();
                        }
                    });
                }
                public void RegisterTwoWayListener_62(global::Windows.UI.Xaml.Controls.CheckBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_62_IsChecked();
                        }
                    });
                }
                public void RegisterTwoWayListener_63(global::Windows.UI.Xaml.Controls.CheckBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.ToggleButton.IsCheckedProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_63_IsChecked();
                        }
                    });
                }
                public void RegisterTwoWayListener_69(global::Windows.UI.Xaml.Controls.TextBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBox.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_69_Text();
                        }
                    });
                }
                public void RegisterTwoWayListener_70(global::Windows.UI.Xaml.Controls.TextBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBox.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_70_Text();
                        }
                    });
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // Views\Config.xaml line 82
                {
                    this.Border6 = (global::Windows.UI.Xaml.Controls.Border)(target);
                }
                break;
            case 3: // Views\Config.xaml line 97
                {
                    this.Border7 = (global::Windows.UI.Xaml.Controls.Border)(target);
                }
                break;
            case 4: // Views\Config.xaml line 110
                {
                    this.Border8 = (global::Windows.UI.Xaml.Controls.Border)(target);
                }
                break;
            case 5: // Views\Config.xaml line 112
                {
                    this.LFreqSalto = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 6: // Views\Config.xaml line 113
                {
                    this.Sp6 = (global::Windows.UI.Xaml.Controls.StackPanel)(target);
                }
                break;
            case 7: // Views\Config.xaml line 118
                {
                    this.LFreqSaltoI = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 8: // Views\Config.xaml line 119
                {
                    this.LFreqSaltoC = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 9: // Views\Config.xaml line 120
                {
                    this.LFreqSaltoF = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 10: // Views\Config.xaml line 121
                {
                    this.LMhz11 = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 11: // Views\Config.xaml line 122
                {
                    this.LMhz12 = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 12: // Views\Config.xaml line 123
                {
                    this.LMhz13 = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 13: // Views\Config.xaml line 114
                {
                    this.TboxFreqSaltoI = (global::Windows.UI.Xaml.Controls.TextBox)(target);
                }
                break;
            case 14: // Views\Config.xaml line 115
                {
                    this.TboxFreqSaltoM = (global::Windows.UI.Xaml.Controls.TextBox)(target);
                }
                break;
            case 15: // Views\Config.xaml line 116
                {
                    this.TboxFreqSaltoF = (global::Windows.UI.Xaml.Controls.TextBox)(target);
                }
                break;
            case 16: // Views\Config.xaml line 99
                {
                    this.Sp5 = (global::Windows.UI.Xaml.Controls.StackPanel)(target);
                }
                break;
            case 17: // Views\Config.xaml line 103
                {
                    this.TbEspBT = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 18: // Views\Config.xaml line 104
                {
                    this.LFreqEspIBT = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 19: // Views\Config.xaml line 105
                {
                    this.LFreqEspFBT = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 20: // Views\Config.xaml line 106
                {
                    this.LMhz9 = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 21: // Views\Config.xaml line 107
                {
                    this.LMhz10 = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 22: // Views\Config.xaml line 100
                {
                    this.TboxFreqIEspBT = (global::Windows.UI.Xaml.Controls.TextBox)(target);
                }
                break;
            case 23: // Views\Config.xaml line 101
                {
                    this.TboxFreqFEspBT = (global::Windows.UI.Xaml.Controls.TextBox)(target);
                }
                break;
            case 24: // Views\Config.xaml line 84
                {
                    this.Sp4 = (global::Windows.UI.Xaml.Controls.StackPanel)(target);
                }
                break;
            case 25: // Views\Config.xaml line 89
                {
                    this.LMhz6 = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 26: // Views\Config.xaml line 90
                {
                    this.LFreqIBT = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 27: // Views\Config.xaml line 91
                {
                    this.LMhz7 = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 28: // Views\Config.xaml line 92
                {
                    this.LFreqMBT = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 29: // Views\Config.xaml line 93
                {
                    this.LMhz8 = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 30: // Views\Config.xaml line 94
                {
                    this.LFreqFBT = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 31: // Views\Config.xaml line 85
                {
                    this.TboxFreqIBT = (global::Windows.UI.Xaml.Controls.TextBox)(target);
                }
                break;
            case 32: // Views\Config.xaml line 86
                {
                    this.TboxFreqMBT = (global::Windows.UI.Xaml.Controls.TextBox)(target);
                }
                break;
            case 33: // Views\Config.xaml line 87
                {
                    this.TboxFreqFBT = (global::Windows.UI.Xaml.Controls.TextBox)(target);
                }
                break;
            case 34: // Views\Config.xaml line 44
                {
                    this.ComboBox = (global::Windows.UI.Xaml.Controls.ComboBox)(target);
                    ((global::Windows.UI.Xaml.Controls.ComboBox)this.ComboBox).SelectionChanged += this.ComboBox_SelectionChanged;
                }
                break;
            case 35: // Views\Config.xaml line 50
                {
                    this.Border4 = (global::Windows.UI.Xaml.Controls.Border)(target);
                }
                break;
            case 36: // Views\Config.xaml line 65
                {
                    this.Border5 = (global::Windows.UI.Xaml.Controls.Border)(target);
                }
                break;
            case 37: // Views\Config.xaml line 67
                {
                    this.Sp3 = (global::Windows.UI.Xaml.Controls.StackPanel)(target);
                }
                break;
            case 38: // Views\Config.xaml line 71
                {
                    this.TbEsp = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 39: // Views\Config.xaml line 72
                {
                    this.LFreqEspI = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 40: // Views\Config.xaml line 73
                {
                    this.LFreqEspF = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 41: // Views\Config.xaml line 74
                {
                    this.LMhz4 = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 42: // Views\Config.xaml line 75
                {
                    this.LMhz5 = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 43: // Views\Config.xaml line 68
                {
                    this.TboxFreqIEsp = (global::Windows.UI.Xaml.Controls.TextBox)(target);
                }
                break;
            case 44: // Views\Config.xaml line 69
                {
                    this.TboxFreqFEsp = (global::Windows.UI.Xaml.Controls.TextBox)(target);
                }
                break;
            case 45: // Views\Config.xaml line 52
                {
                    this.Sp2 = (global::Windows.UI.Xaml.Controls.StackPanel)(target);
                }
                break;
            case 46: // Views\Config.xaml line 57
                {
                    this.LMhz1 = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 47: // Views\Config.xaml line 58
                {
                    this.LFreqI = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 48: // Views\Config.xaml line 59
                {
                    this.LMhz2 = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 49: // Views\Config.xaml line 60
                {
                    this.LFreqC = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 50: // Views\Config.xaml line 61
                {
                    this.LMhz3 = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 51: // Views\Config.xaml line 62
                {
                    this.LFreqF = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 52: // Views\Config.xaml line 53
                {
                    this.TboxFreqI = (global::Windows.UI.Xaml.Controls.TextBox)(target);
                }
                break;
            case 53: // Views\Config.xaml line 54
                {
                    this.TboxFreqM = (global::Windows.UI.Xaml.Controls.TextBox)(target);
                }
                break;
            case 54: // Views\Config.xaml line 55
                {
                    this.TboxFreqF = (global::Windows.UI.Xaml.Controls.TextBox)(target);
                }
                break;
            case 55: // Views\Config.xaml line 14
                {
                    this.Border1 = (global::Windows.UI.Xaml.Controls.Border)(target);
                }
                break;
            case 56: // Views\Config.xaml line 26
                {
                    this.Border2 = (global::Windows.UI.Xaml.Controls.Border)(target);
                }
                break;
            case 57: // Views\Config.xaml line 33
                {
                    this.Border3 = (global::Windows.UI.Xaml.Controls.Border)(target);
                }
                break;
            case 58: // Views\Config.xaml line 35
                {
                    this.CbFreqI = (global::Windows.UI.Xaml.Controls.CheckBox)(target);
                }
                break;
            case 59: // Views\Config.xaml line 36
                {
                    this.CbFreqC = (global::Windows.UI.Xaml.Controls.CheckBox)(target);
                }
                break;
            case 60: // Views\Config.xaml line 37
                {
                    this.CbFreqF = (global::Windows.UI.Xaml.Controls.CheckBox)(target);
                }
                break;
            case 61: // Views\Config.xaml line 28
                {
                    this.CbPrintI = (global::Windows.UI.Xaml.Controls.CheckBox)(target);
                }
                break;
            case 62: // Views\Config.xaml line 29
                {
                    this.CbPrintC = (global::Windows.UI.Xaml.Controls.CheckBox)(target);
                }
                break;
            case 63: // Views\Config.xaml line 30
                {
                    this.CbPrintF = (global::Windows.UI.Xaml.Controls.CheckBox)(target);
                }
                break;
            case 64: // Views\Config.xaml line 16
                {
                    this.Sp1 = (global::Windows.UI.Xaml.Controls.StackPanel)(target);
                }
                break;
            case 65: // Views\Config.xaml line 20
                {
                    this.LdBm1 = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 66: // Views\Config.xaml line 21
                {
                    this.LRefLev = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 67: // Views\Config.xaml line 22
                {
                    this.LAtt = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 68: // Views\Config.xaml line 23
                {
                    this.LdBm2 = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 69: // Views\Config.xaml line 17
                {
                    this.TboxRL = (global::Windows.UI.Xaml.Controls.TextBox)(target);
                }
                break;
            case 70: // Views\Config.xaml line 18
                {
                    this.TboxAtt = (global::Windows.UI.Xaml.Controls.TextBox)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.17.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Views\Config.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    Config_obj1_Bindings bindings = new Config_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            }
            return returnValue;
        }
    }
}

